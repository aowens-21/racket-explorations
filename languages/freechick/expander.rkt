#lang br/quicklang

(require racket/gui/base)
(require racket/draw)

; Initial values for game state
(define window-width 500)
(define window-height 500)

(define map-vector (vector ""))
(define inner-map-index 0)

; Macros for expansion
(define-macro (fc-module-begin PARSE-TREE)
  #'(#%module-begin
     PARSE-TREE))
(provide (rename-out [fc-module-begin #%module-begin]))                               

(define-macro (fc-program LINE ...)
  #'(void LINE ...))
(provide fc-program)

(define-macro (fc-map ROW ...)
  (with-pattern ([CALLER-STX (syntax->datum caller-stx)])
    #'(let ([calling-pattern 'CALLER-STX])
        (init-map-vector (length (cdr calling-pattern)))
        ROW ...)))
(provide fc-map)

(define-macro (map-row CELL ...)
  #'(build-row CELL ...))
(provide map-row)

; Helpers (calls generated by macros)
(define (init-map-vector len) (set! map-vector (make-vector len (vector ""))))
(define (build-row cell . rest)
  (vector-set! map-vector inner-map-index (list->vector (cons cell rest)))
  (set! inner-map-index (add1 inner-map-index)))